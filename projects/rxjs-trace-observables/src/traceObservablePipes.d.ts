import * as rxjsOperators from "rxjs/operators";
export declare const origRxJsOperators: {
    audit: typeof rxjsOperators.audit;
    auditTime: typeof rxjsOperators.auditTime;
    buffer: typeof rxjsOperators.buffer;
    bufferCount: typeof rxjsOperators.bufferCount;
    bufferTime: typeof rxjsOperators.bufferTime;
    bufferToggle: typeof rxjsOperators.bufferToggle;
    bufferWhen: typeof rxjsOperators.bufferWhen;
    catchError: typeof rxjsOperators.catchError;
    combineAll: typeof rxjsOperators.combineAll;
    combineLatest: typeof rxjsOperators.combineLatest;
    concat: typeof rxjsOperators.concat;
    concatAll: typeof rxjsOperators.concatAll;
    concatMap: typeof rxjsOperators.concatMap;
    concatMapTo: typeof rxjsOperators.concatMapTo;
    count: typeof rxjsOperators.count;
    debounce: typeof rxjsOperators.debounce;
    debounceTime: typeof rxjsOperators.debounceTime;
    defaultIfEmpty: typeof rxjsOperators.defaultIfEmpty;
    delay: typeof rxjsOperators.delay;
    delayWhen: typeof rxjsOperators.delayWhen;
    dematerialize: typeof rxjsOperators.dematerialize;
    distinct: typeof rxjsOperators.distinct;
    distinctUntilChanged: typeof rxjsOperators.distinctUntilChanged;
    distinctUntilKeyChanged: typeof rxjsOperators.distinctUntilKeyChanged;
    elementAt: typeof rxjsOperators.elementAt;
    endWith: typeof rxjsOperators.endWith;
    every: typeof rxjsOperators.every;
    exhaust: typeof rxjsOperators.exhaust;
    exhaustMap: typeof rxjsOperators.exhaustMap;
    expand: typeof rxjsOperators.expand;
    filter: typeof rxjsOperators.filter;
    finalize: typeof rxjsOperators.finalize;
    find: typeof rxjsOperators.find;
    findIndex: typeof rxjsOperators.findIndex;
    first: typeof rxjsOperators.first;
    groupBy: typeof rxjsOperators.groupBy;
    ignoreElements: typeof rxjsOperators.ignoreElements;
    isEmpty: typeof rxjsOperators.isEmpty;
    last: typeof rxjsOperators.last;
    map: typeof rxjsOperators.map;
    mapTo: typeof rxjsOperators.mapTo;
    materialize: typeof rxjsOperators.materialize;
    max: typeof rxjsOperators.max;
    merge: typeof rxjsOperators.merge;
    mergeAll: typeof rxjsOperators.mergeAll;
    mergeMap: typeof rxjsOperators.mergeMap;
    flatMap: typeof rxjsOperators.mergeMap;
    mergeMapTo: typeof rxjsOperators.mergeMapTo;
    mergeScan: typeof rxjsOperators.mergeScan;
    min: typeof rxjsOperators.min;
    multicast: typeof rxjsOperators.multicast;
    observeOn: typeof rxjsOperators.observeOn;
    onErrorResumeNext: typeof rxjsOperators.onErrorResumeNext;
    pairwise: typeof rxjsOperators.pairwise;
    partition: typeof rxjsOperators.partition;
    pluck: typeof rxjsOperators.pluck;
    publish: typeof rxjsOperators.publish;
    publishBehavior: typeof rxjsOperators.publishBehavior;
    publishLast: typeof rxjsOperators.publishLast;
    publishReplay: typeof rxjsOperators.publishReplay;
    race: typeof rxjsOperators.race;
    reduce: typeof rxjsOperators.reduce;
    repeat: typeof rxjsOperators.repeat;
    repeatWhen: typeof rxjsOperators.repeatWhen;
    retry: typeof rxjsOperators.retry;
    retryWhen: typeof rxjsOperators.retryWhen;
    refCount: typeof rxjsOperators.refCount;
    sample: typeof rxjsOperators.sample;
    sampleTime: typeof rxjsOperators.sampleTime;
    scan: typeof rxjsOperators.scan;
    sequenceEqual: typeof rxjsOperators.sequenceEqual;
    share: typeof rxjsOperators.share;
    shareReplay: typeof rxjsOperators.shareReplay;
    single: typeof rxjsOperators.single;
    skip: typeof rxjsOperators.skip;
    skipLast: typeof rxjsOperators.skipLast;
    skipUntil: typeof rxjsOperators.skipUntil;
    skipWhile: typeof rxjsOperators.skipWhile;
    startWith: typeof rxjsOperators.startWith;
    subscribeOn: typeof rxjsOperators.subscribeOn;
    switchAll: typeof rxjsOperators.switchAll;
    switchMap: typeof rxjsOperators.switchMap;
    switchMapTo: typeof rxjsOperators.switchMapTo;
    take: typeof rxjsOperators.take;
    takeLast: typeof rxjsOperators.takeLast;
    takeUntil: typeof rxjsOperators.takeUntil;
    takeWhile: typeof rxjsOperators.takeWhile;
    tap: typeof rxjsOperators.tap;
    throttle: typeof rxjsOperators.throttle;
    throttleTime: typeof rxjsOperators.throttleTime;
    throwIfEmpty: typeof rxjsOperators.throwIfEmpty;
    timeInterval: typeof rxjsOperators.timeInterval;
    timeout: typeof rxjsOperators.timeout;
    timeoutWith: typeof rxjsOperators.timeoutWith;
    timestamp: typeof rxjsOperators.timestamp;
    toArray: typeof rxjsOperators.toArray;
    window: typeof rxjsOperators.window;
    windowCount: typeof rxjsOperators.windowCount;
    windowTime: typeof rxjsOperators.windowTime;
    windowToggle: typeof rxjsOperators.windowToggle;
    windowWhen: typeof rxjsOperators.windowWhen;
    withLatestFrom: typeof rxjsOperators.withLatestFrom;
    zip: typeof rxjsOperators.zip;
    zipAll: typeof rxjsOperators.zipAll;
};
export declare function traceObservablePipes(): void;
export declare function hashString(str: string): number;
